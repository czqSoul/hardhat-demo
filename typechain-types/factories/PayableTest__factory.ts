/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { PayableTest, PayableTestInterface } from "../PayableTest";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_a",
        type: "address",
      },
    ],
    name: "getRanddomBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "transfer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_account",
        type: "address",
      },
    ],
    name: "transfer2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "transfer3",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e4806100206000396000f3fe6080604052600436106100565760003560e01c806312065fe01461005f5780631b9265b81461005d57806321adf6a41461008057806352d6ec76146100885780638a4068dd1461009b578063f1cac37d146100a357005b3661005d57005b005b34801561006b57600080fd5b50475b60405190815260200160405180910390f35b61005d6100cb565b61005d61009636600461018a565b6100fa565b61005d610133565b3480156100af57600080fd5b5061006e6100be36600461018a565b6001600160a01b03163190565b60405130903480156108fc02916000818181858888f193505050501580156100f7573d6000803e3d6000fd5b50565b6040516001600160a01b038216903480156108fc02916000818181858888f1935050505015801561012f573d6000803e3d6000fd5b5050565b60405173ab8483f64d9c6d1ecf9b849ae677dd3315835cb29081903480156108fc02916000818181858888f1935050505015801561012f573d6000803e3d6000fd5b6001600160a01b03811681146100f757600080fd5b60006020828403121561019c57600080fd5b81356101a781610175565b939250505056fea264697066735822122006b85bd5b1db2134e10ca7439fb5a0ce04c83a2833fe236e0028095fa89b82b964736f6c63430008090033";

type PayableTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PayableTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PayableTest__factory extends ContractFactory {
  constructor(...args: PayableTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PayableTest> {
    return super.deploy(overrides || {}) as Promise<PayableTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PayableTest {
    return super.attach(address) as PayableTest;
  }
  override connect(signer: Signer): PayableTest__factory {
    return super.connect(signer) as PayableTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PayableTestInterface {
    return new utils.Interface(_abi) as PayableTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PayableTest {
    return new Contract(address, _abi, signerOrProvider) as PayableTest;
  }
}
